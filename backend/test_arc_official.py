#!/usr/bin/env python3
"""
Pruebas con puzzles oficiales de ARC
Usando solo el modelo de razonamiento l√≥gico
"""

import numpy as np
import json
import os
from glob import glob
from typing import Dict, List
from arc import ARCSolver, LogicalReasoningNetwork

def load_official_puzzles(limit=5):
    """Carga puzzles oficiales de ARC"""
    puzzles = []
    cache_dir = "arc_official_cache"
    
    if os.path.exists(cache_dir):
        files = sorted(glob(os.path.join(cache_dir, "*.json")))[:limit]
        
        for file_path in files:
            with open(file_path, 'r') as f:
                data = json.load(f)
                puzzles.append({
                    'name': os.path.basename(file_path).replace('.json', ''),
                    'data': data
                })
    
    return puzzles

def analyze_puzzle(puzzle_name: str, puzzle_data: Dict):
    """Analiza un puzzle espec√≠fico con detalles"""
    print(f"\n{'='*60}")
    print(f"üìù PUZZLE: {puzzle_name}")
    print(f"{'='*60}")
    
    train = puzzle_data['train']
    test_input = np.array(puzzle_data['test'][0]['input'])
    
    # Informaci√≥n del puzzle
    print(f"üìä Informaci√≥n:")
    print(f"  - Ejemplos de entrenamiento: {len(train)}")
    print(f"  - Tama√±o entrada test: {test_input.shape}")
    
    for i, example in enumerate(train[:2]):  # Primeros 2 ejemplos
        inp = np.array(example['input'])
        out = np.array(example['output'])
        print(f"  - Ejemplo {i+1}: {inp.shape} ‚Üí {out.shape}")
        
        # Detectar cambio de tama√±o
        if inp.shape != out.shape:
            print(f"    ‚ö†Ô∏è Cambio de tama√±o detectado!")
        
        # Detectar mapeo de valores
        unique_in = np.unique(inp)
        unique_out = np.unique(out)
        if set(unique_in) != set(unique_out):
            print(f"    üîÑ Valores: {unique_in.tolist()} ‚Üí {unique_out.tolist()}")
    
    # Resolver
    solver = ARCSolver()
    solution = solver.reason(train, test_input)
    
    print(f"\nüß† Razonamiento:")
    
    # Mostrar inferencias por nivel
    if hasattr(solver, 'inferences'):
        macro_inf = [inf for inf in solver.inferences if inf.level == 'macro']
        meso_inf = [inf for inf in solver.inferences if inf.level == 'meso']
        micro_inf = [inf for inf in solver.inferences if inf.level == 'micro']
        
        if macro_inf:
            print(f"  MACRO ({len(macro_inf)} inferencias):")
            for inf in macro_inf[:2]:
                print(f"    ‚Ä¢ {inf.conclusion[:60]}")
        
        if meso_inf:
            print(f"  MESO ({len(meso_inf)} inferencias):")
            for inf in meso_inf[:2]:
                print(f"    ‚Ä¢ {inf.conclusion[:60]}")
        
        if micro_inf:
            print(f"  MICRO ({len(micro_inf)} inferencias):")
            for inf in micro_inf[:2]:
                print(f"    ‚Ä¢ {inf.conclusion[:60]}")
    
    # Resultado
    if 'output' in puzzle_data['test'][0]:
        expected = np.array(puzzle_data['test'][0]['output'])
        if solution.shape == expected.shape:
            accuracy = np.mean(solution == expected) * 100
            if accuracy == 100:
                print(f"\n‚úÖ PERFECTO: 100% accuracy")
            elif accuracy > 90:
                print(f"\nüî∂ MUY BIEN: {accuracy:.1f}% accuracy")
            elif accuracy > 70:
                print(f"\n‚ö†Ô∏è PARCIAL: {accuracy:.1f}% accuracy")
            else:
                print(f"\n‚ùå BAJO: {accuracy:.1f}% accuracy")
        else:
            print(f"\n‚ùå ERROR: Tama√±o incorrecto {solution.shape} vs {expected.shape}")
            accuracy = 0
    else:
        print(f"\n‚ùì Sin soluci√≥n conocida")
        accuracy = None
    
    print(f"\nüíæ Soluci√≥n shape: {solution.shape}")
    
    # Mostrar peque√±a muestra de la soluci√≥n
    if solution.size <= 25:
        print(f"Soluci√≥n:\n{solution}")
    
    return accuracy

def test_specific_patterns():
    """Prueba patrones espec√≠ficos conocidos en ARC"""
    print("\n" + "="*80)
    print("üî¨ PRUEBAS DE PATRONES ESPEC√çFICOS")
    print("="*80)
    
    patterns = {
        "Repetici√≥n 3x": {
            'train': [{
                'input': [[1, 2], [3, 4]],
                'output': [[1, 2, 1, 2, 1, 2], [3, 4, 3, 4, 3, 4]]
            }],
            'test': [{'input': [[5, 6], [7, 8]]}],
            'expected_shape': (2, 6)
        },
        "Gravedad": {
            'train': [{
                'input': [[1, 0, 2], [0, 0, 0], [3, 0, 4]],
                'output': [[0, 0, 0], [1, 0, 2], [3, 0, 4]]
            }],
            'test': [{'input': [[5, 0, 0], [0, 6, 0], [0, 0, 7]]}],
            'expected_shape': (3, 3)
        },
        "Mapeo +1": {
            'train': [{
                'input': [[1, 2, 3], [4, 5, 6]],
                'output': [[2, 3, 4], [5, 6, 7]]
            }],
            'test': [{'input': [[7, 8, 9], [1, 2, 3]]}],
            'expected_shape': (2, 3)
        }
    }
    
    for pattern_name, puzzle_data in patterns.items():
        print(f"\nüß™ Patr√≥n: {pattern_name}")
        print("-" * 40)
        
        solver = ARCSolver()
        test_input = np.array(puzzle_data['test'][0]['input'])
        solution = solver.reason(puzzle_data['train'], test_input)
        
        shape_ok = solution.shape == puzzle_data['expected_shape']
        print(f"  Shape esperado: {puzzle_data['expected_shape']}")
        print(f"  Shape obtenido: {solution.shape}")
        
        if shape_ok:
            print(f"  ‚úÖ Dimensiones correctas")
        else:
            print(f"  ‚ùå Dimensiones incorrectas")
        
        # Mostrar razonamiento
        if hasattr(solver, 'inferences') and solver.inferences:
            print(f"  Inferencia: {solver.inferences[0].conclusion[:50]}")

def main():
    print("="*80)
    print("üß† PRUEBAS CON PUZZLES OFICIALES DE ARC")
    print("Red de Razonamiento L√≥gico (Macro‚ÜíMeso‚ÜíMicro)")
    print("="*80)
    
    # Cargar puzzles
    puzzles = load_official_puzzles(limit=3)
    
    if not puzzles:
        print("‚ùå No se encontraron puzzles oficiales")
        return
    
    print(f"\nüìÅ Cargados {len(puzzles)} puzzles oficiales")
    
    # Analizar cada puzzle
    accuracies = []
    for puzzle in puzzles:
        acc = analyze_puzzle(puzzle['name'], puzzle['data'])
        if acc is not None:
            accuracies.append(acc)
    
    # Resumen
    if accuracies:
        print("\n" + "="*80)
        print("üìä RESUMEN")
        print("="*80)
        print(f"  Puzzles evaluados: {len(accuracies)}")
        print(f"  Accuracy promedio: {np.mean(accuracies):.1f}%")
        print(f"  Accuracy m√°ximo: {max(accuracies):.1f}%")
        print(f"  Accuracy m√≠nimo: {min(accuracies):.1f}%")
        print(f"  Puzzles perfectos: {sum(1 for a in accuracies if a == 100)}")
    
    # Pruebas de patrones espec√≠ficos
    test_specific_patterns()

if __name__ == "__main__":
    main()