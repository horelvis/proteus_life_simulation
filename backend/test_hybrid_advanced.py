#!/usr/bin/env python3
"""
Test del Sistema H√≠brido Avanzado PROTEUS-ARC
Versi√≥n final con:
- An√°lisis multiescala
- Segmentaci√≥n y grafos
- S√≠ntesis de reglas
- An√°lisis estructural profundo
"""

import numpy as np
from arc.hybrid_proteus_solver import HybridProteusARCSolver
from arc.structural_analyzer import StructuralAnalyzer

def test_with_structural_analysis(train_examples, test_input, test_name):
    """Test con an√°lisis estructural completo"""
    print(f"\nüî¨ {test_name}")
    print("="*50)
    
    # An√°lisis estructural del input
    analyzer = StructuralAnalyzer()
    input_analysis = analyzer.analyze_comprehensive(test_input)
    
    print("üìä An√°lisis Estructural del Input:")
    print(f"  ‚Ä¢ Componentes conectados: {input_analysis['connectivity'].get('total_components', 0)}")
    print(f"  ‚Ä¢ Complejidad estructural: {input_analysis.get('structural_complexity', 0):.2f}")
    print(f"  ‚Ä¢ Simetr√≠a detectada: {input_analysis['symmetry']}")
    
    # Resolver con el solver h√≠brido
    solver = HybridProteusARCSolver()
    solution, steps = solver.solve_with_steps(train_examples, test_input)
    
    print(f"\nüí° Soluci√≥n:")
    print(f"  Input: {test_input.tolist()}")
    print(f"  Output: {solution.tolist() if solution is not None else 'No encontrada'}")
    print(f"  Confianza: {solver.confidence:.2%}")
    
    # An√°lisis estructural de la soluci√≥n
    if solution is not None:
        output_analysis = analyzer.analyze_comprehensive(solution)
        print(f"\nüìä An√°lisis Estructural del Output:")
        print(f"  ‚Ä¢ Componentes: {output_analysis['connectivity'].get('total_components', 0)}")
        print(f"  ‚Ä¢ Complejidad: {output_analysis.get('structural_complexity', 0):.2f}")
        
        # Verificar preservaci√≥n de propiedades topol√≥gicas
        input_topo = input_analysis['topology']
        output_topo = output_analysis['topology']
        print(f"\nüîÑ Transformaci√≥n Topol√≥gica:")
        print(f"  ‚Ä¢ Cambio en componentes: {output_topo.get('components', 0) - input_topo.get('components', 0):+d}")
        print(f"  ‚Ä¢ Preservaci√≥n de simetr√≠a: {output_analysis['symmetry'] == input_analysis['symmetry']}")
    
    return solution

def test_pattern_cross_advanced():
    """Test: Expandir cruz con an√°lisis multiescala"""
    train_examples = [
        {
            "input": [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
            "output": [[0, 1, 0], [1, 1, 1], [0, 1, 0]]
        },
        {
            "input": [[0, 0, 0], [0, 2, 0], [0, 0, 0]],
            "output": [[0, 2, 0], [2, 2, 2], [0, 2, 0]]
        }
    ]
    
    test_input = np.array([[0, 0, 0], [0, 3, 0], [0, 0, 0]])
    return test_with_structural_analysis(
        train_examples, 
        test_input, 
        "Test 1: Expansi√≥n de Cruz (Multiescala)"
    )

def test_fill_with_graph_analysis():
    """Test: Rellenar forma usando an√°lisis de grafos"""
    train_examples = [
        {
            "input": [[1, 1, 1], [1, 0, 1], [1, 1, 1]],
            "output": [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
        },
        {
            "input": [[2, 2, 0], [2, 0, 0], [2, 2, 2]],
            "output": [[2, 2, 2], [2, 2, 2], [2, 2, 2]]
        }
    ]
    
    test_input = np.array([[3, 0, 3], [3, 0, 3], [3, 3, 3]])
    return test_with_structural_analysis(
        train_examples,
        test_input,
        "Test 2: Relleno con An√°lisis de Grafos"
    )

def test_complex_segmentation():
    """Test: Patr√≥n complejo con segmentaci√≥n"""
    train_examples = [
        {
            "input": [[1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1]],
            "output": [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]
        },
        {
            "input": [[2, 0, 0, 2], [0, 2, 2, 0], [0, 2, 2, 0], [2, 0, 0, 2]],
            "output": [[2, 2, 2, 2], [2, 2, 2, 2], [2, 2, 2, 2], [2, 2, 2, 2]]
        }
    ]
    
    test_input = np.array([[3, 0, 0, 3], [0, 3, 3, 0], [0, 3, 3, 0], [3, 0, 0, 3]])
    return test_with_structural_analysis(
        train_examples,
        test_input,
        "Test 3: Segmentaci√≥n y S√≠ntesis de Reglas"
    )

def test_rule_synthesis():
    """Test: S√≠ntesis autom√°tica de reglas complejas"""
    train_examples = [
        {
            "input": [[1, 2], [3, 4]],
            "output": [[4, 3], [2, 1]]  # Rotaci√≥n 180¬∞
        },
        {
            "input": [[5, 6], [7, 8]],
            "output": [[8, 7], [6, 5]]
        }
    ]
    
    test_input = np.array([[2, 3], [4, 5]])
    return test_with_structural_analysis(
        train_examples,
        test_input,
        "Test 4: S√≠ntesis de Reglas Complejas"
    )

def analyze_hybrid_system():
    """Analiza el sistema h√≠brido completo"""
    print("\n" + "="*60)
    print("üß¨ AN√ÅLISIS DEL SISTEMA H√çBRIDO AVANZADO")
    print("="*60)
    
    # Analizar capacidades del StructuralAnalyzer
    analyzer = StructuralAnalyzer()
    test_matrix = np.array([[1, 0, 1], [0, 1, 0], [1, 0, 1]])
    analysis = analyzer.analyze_comprehensive(test_matrix)
    
    print("\nüìä Capacidades del An√°lisis Estructural:")
    print("  M√©tricas disponibles:")
    for key in analysis.keys():
        print(f"    ‚Ä¢ {key}")
    
    print("\nüî¨ Caracter√≠sticas del Sistema H√≠brido:")
    print("  ‚Ä¢ An√°lisis topol√≥gico con firmas")
    print("  ‚Ä¢ Detecci√≥n de componentes conexas")
    print("  ‚Ä¢ An√°lisis de agujeros y simetr√≠as")
    print("  ‚Ä¢ Dimensi√≥n fractal por box-counting")
    print("  ‚Ä¢ Grafos de adyacencia para conectividad")
    print("  ‚Ä¢ Segmentaci√≥n por colores")
    print("  ‚Ä¢ S√≠ntesis autom√°tica de reglas")
    print("  ‚Ä¢ Selecci√≥n de reglas guiada por topolog√≠a")
    
    print("\n‚ö° Ventajas del Enfoque H√≠brido:")
    print("  ‚Ä¢ Combina an√°lisis simb√≥lico con topol√≥gico")
    print("  ‚Ä¢ Mejor generalizaci√≥n a patrones no vistos")
    print("  ‚Ä¢ Explicabilidad de las transformaciones")
    print("  ‚Ä¢ Adaptaci√≥n din√°mica seg√∫n estructura")

def main():
    print("="*60)
    print("üöÄ SISTEMA PROTEUS-ARC H√çBRIDO AVANZADO")
    print("Versi√≥n Final: Multiescala + Segmentaci√≥n + Grafos + S√≠ntesis")
    print("="*60)
    
    # Ejecutar tests
    results = []
    results.append(("Cruz Multiescala", test_pattern_cross_advanced()))
    results.append(("Relleno con Grafos", test_fill_with_graph_analysis()))
    results.append(("Segmentaci√≥n Compleja", test_complex_segmentation()))
    results.append(("S√≠ntesis de Reglas", test_rule_synthesis()))
    
    # Resumen
    print("\n" + "="*60)
    print("üìà RESUMEN DE RESULTADOS")
    print("="*60)
    
    successful = sum(1 for _, r in results if r is not None)
    print(f"Tests exitosos: {successful}/{len(results)}")
    
    for name, result in results:
        status = "‚úÖ" if result is not None else "‚ùå"
        print(f"  {status} {name}")
    
    # An√°lisis del sistema
    analyze_hybrid_system()

if __name__ == "__main__":
    main()