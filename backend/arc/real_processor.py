#!/usr/bin/env python3
"""
Procesador REAL de puzzles ARC
Sin simulaci√≥n, sin hardcode, completamente transparente
Muestra exactamente qu√© hace cada m√≥dulo
"""

import numpy as np
import json
import logging
import traceback
from pathlib import Path
from typing import Dict, Any, Optional, List
import asyncio

# Importar m√≥dulos reales
try:
    # Primero intentar cargar la versi√≥n pre-entrenada (v√°lida para ARC)
    from vjepa_pretrained import VJEPAPretrainedARC
    VJEPALayer = VJEPAPretrainedARC  # Versi√≥n con conocimiento visual pre-entrenado
    print("‚úÖ VJEPAPretrainedARC loaded (Pre-trained visual knowledge + ARC compliant)")
except Exception as e:
    print(f"‚ö†Ô∏è VJEPAPretrainedARC not available: {e}")
    try:
        from vjepa_arc_solver import VJEPAARCSolver
        VJEPALayer = VJEPAARCSolver  # Versi√≥n sin pre-entrenamiento
        print("‚úÖ VJEPAARCSolver loaded (ARC compliant - no pre-training)")
    except Exception as e2:
        print(f"‚ùå VJEPAARCSolver error: {e2}")
        try:
            from vjepa_observer import VJEPAObserver
            VJEPALayer = VJEPAObserver  # Fallback al observer b√°sico
            print("‚ö†Ô∏è Using basic VJEPAObserver (fallback)")
        except Exception as e3:
            VJEPALayer = None
            print(f"‚ùå V-JEPA fallback error: {e3}")
    
try:
    from iterative_attention_observer import IterativeAttentionObserver
    print("‚úÖ IterativeAttentionObserver loaded")
except Exception as e:
    IterativeAttentionObserver = None
    print(f"‚ùå IterativeAttentionObserver error: {e}")
    
try:
    from enhanced_memory import EnhancedMemory
    print("‚úÖ EnhancedMemory loaded")
except Exception as e:
    EnhancedMemory = None
    print(f"‚ùå EnhancedMemory error: {e}")
    
try:
    from matrix_to_visual import MatrixToVisual
    print("‚úÖ MatrixToVisual loaded")
except Exception as e:
    MatrixToVisual = None
    print(f"‚ùå MatrixToVisual error: {e}")

try:
    from hierarchical_analyzer import HierarchicalAnalyzer
    print("‚úÖ HierarchicalAnalyzer loaded")
except Exception as e:
    HierarchicalAnalyzer = None
    print(f"‚ùå HierarchicalAnalyzer error: {e}")

logger = logging.getLogger(__name__)

class RealARCProcessor:
    """
    Procesador completamente transparente
    Muestra exactamente qu√© hace cada m√≥dulo, sin inventar nada
    """
    
    def __init__(self, websocket_handler=None):
        self.ws_handler = websocket_handler
        self.modules_status = {}
        self.vjepa_prediction = None  # Para guardar predicci√≥n de V-JEPA
        
        # Inicializar m√≥dulos reales
        self._init_modules()
        
    def _init_modules(self):
        """Inicializa m√≥dulos y reporta estado real"""
        
        # V-JEPA
        try:
            if VJEPALayer:
                self.vjepa = VJEPALayer()
                if VJEPALayer.__name__ == 'VJEPAPretrainedARC':
                    self.modules_status['vjepa'] = 'initialized_pretrained_arc'
                    self._send_update('vjepa_observation', {
                        'message': 'V-JEPA Pre-entrenado ARC inicializado (conocimiento visual + cumple reglas)',
                        'status': 'ready',
                        'arc_compliant': True,
                        'pretrained': True
                    })
                elif VJEPALayer.__name__ == 'VJEPAARCSolver':
                    self.modules_status['vjepa'] = 'initialized_arc_compliant'
                    self._send_update('vjepa_observation', {
                        'message': 'V-JEPA ARC inicializado (sin pre-entrenamiento, cumple reglas)',
                        'status': 'ready',
                        'arc_compliant': True
                    })
                else:
                    self.modules_status['vjepa'] = 'initialized'
                    self._send_update('vjepa_observation', {
                        'message': 'V-JEPA b√°sico inicializado',
                        'status': 'ready'
                    })
            else:
                self.vjepa = None
                self.modules_status['vjepa'] = 'not_found'
                self._send_update('error', {
                    'message': 'V-JEPA no encontrado - m√≥dulo no importado'
                })
        except Exception as e:
            self.vjepa = None
            self.modules_status['vjepa'] = f'error: {str(e)}'
            self._send_update('error', {
                'message': f'Error inicializando V-JEPA: {str(e)}',
                'traceback': traceback.format_exc()
            })
        
        # Atenci√≥n Iterativa
        try:
            if IterativeAttentionObserver:
                self.attention = IterativeAttentionObserver(
                    max_iterations=10,
                    understanding_threshold=0.85
                )
                self.modules_status['attention'] = 'initialized'
                self._send_update('attention_update', {
                    'message': 'Sistema de atenci√≥n inicializado',
                    'iteration': 0,
                    'status': 'ready'
                })
            else:
                self.attention = None
                self.modules_status['attention'] = 'not_found'
        except Exception as e:
            self.attention = None
            self.modules_status['attention'] = f'error: {str(e)}'
            
        # Memoria
        try:
            if EnhancedMemory:
                self.memory = EnhancedMemory()
                self.modules_status['memory'] = 'initialized'
                self._send_update('memory_access', {
                    'operation': 'init',
                    'result': 'Memoria SQLite inicializada'
                })
            else:
                self.memory = None
                self.modules_status['memory'] = 'not_found'
        except Exception as e:
            self.memory = None
            self.modules_status['memory'] = f'error: {str(e)}'
            
        # Conversor Visual
        try:
            if MatrixToVisual:
                self.visual_converter = MatrixToVisual()
                self.modules_status['visual'] = 'initialized'
            else:
                self.visual_converter = None
                self.modules_status['visual'] = 'not_found'
        except Exception as e:
            self.visual_converter = None
            self.modules_status['visual'] = f'error: {str(e)}'
            
        # Analizador Jer√°rquico (Abstracci√≥n por capas)
        try:
            if HierarchicalAnalyzer:
                self.hierarchical = HierarchicalAnalyzer()
                self.modules_status['hierarchical'] = 'initialized'
                self._send_update('hierarchical_update', {
                    'message': 'Analizador jer√°rquico inicializado',
                    'layers': ['macro', 'meso', 'micro'],
                    'status': 'ready'
                })
            else:
                self.hierarchical = None
                self.modules_status['hierarchical'] = 'not_found'
        except Exception as e:
            self.hierarchical = None
            self.modules_status['hierarchical'] = f'error: {str(e)}'
    
    def _send_update(self, event_type: str, data: Dict):
        """Env√≠a actualizaci√≥n real al frontend"""
        if self.ws_handler:
            try:
                asyncio.create_task(
                    self.ws_handler.send_to_all({
                        'type': event_type,
                        **data
                    })
                )
            except:
                pass
    
    async def process_puzzle(self, puzzle_data: Dict, verbose: bool = True) -> Dict:
        """
        Procesa un puzzle mostrando exactamente qu√© hace cada m√≥dulo
        """
        result = {
            'success': False,
            'prediction': None,
            'confidence': 0.0,
            'modules_output': {},
            'errors': []
        }
        
        try:
            self._send_update('reasoning_step', {
                'step': f'Iniciando procesamiento de puzzle {puzzle_data.get("id", "unknown")}'
            })
            
            # Verificar que tenemos datos de entrenamiento
            if 'train' not in puzzle_data or not puzzle_data['train']:
                error_msg = 'No hay ejemplos de entrenamiento en el puzzle'
                self._send_update('error', {'message': error_msg})
                result['errors'].append(error_msg)
                return result
            
            # MODO DEBUG: Ejecutar V-JEPA primero, luego Jer√°rquico
            self._send_update('reasoning_step', {
                'step': 'üî¨ MODO DEBUG: V-JEPA ‚Üí Jer√°rquico (orden corregido)'
            })
            
            # PASO 1: V-JEPA - Identificaci√≥n visual del mundo
            vjepa_output = await self._process_vjepa(puzzle_data)
            result['modules_output']['vjepa'] = vjepa_output
            
            # Esperar un momento para ver el resultado
            await asyncio.sleep(0.5)
            
            # PASO 2: An√°lisis Jer√°rquico - Ahora con contexto de V-JEPA
            hierarchical_output = await self._process_hierarchical(puzzle_data, vjepa_context=vjepa_output)
            result['modules_output']['hierarchical'] = hierarchical_output
            
            # Esperar un momento para ver el resultado
            await asyncio.sleep(0.5)
            
            # TEMPORALMENTE DESACTIVADOS PARA DEBUG
            self._send_update('reasoning_step', {
                'step': '‚è∏Ô∏è M√≥dulos 3-5 desactivados temporalmente para debug'
            })
            
            # Inicializar outputs vac√≠os para los dem√°s m√≥dulos
            attention_output = {'available': False, 'processed': False, 'error': 'Desactivado para debug'}
            memory_output = {'available': False, 'accessed': False, 'error': 'Desactivado para debug'}
            
            result['modules_output']['attention'] = attention_output
            result['modules_output']['memory'] = memory_output
            
            """
            # PASO 2: V-JEPA (si est√° disponible)
            vjepa_output = await self._process_vjepa(puzzle_data)
            result['modules_output']['vjepa'] = vjepa_output
            
            # PASO 3: Atenci√≥n Iterativa (si est√° disponible)
            attention_output = await self._process_attention(puzzle_data)
            result['modules_output']['attention'] = attention_output
            
            # PASO 4: Memoria (si est√° disponible)
            memory_output = await self._process_memory(puzzle_data)
            result['modules_output']['memory'] = memory_output
            """
            
            # PASO 5: Intentar generar predicci√≥n (simplificada para debug)
            prediction = await self._generate_prediction(
                puzzle_data, 
                vjepa_output, 
                attention_output, 
                memory_output
            )
            result['prediction'] = prediction
            
            # Calcular confianza real basada en m√≥dulos activos
            confidence = self._calculate_real_confidence(result['modules_output'])
            result['confidence'] = confidence
            
            # Enviar resultado final
            self._send_update('processing_complete', {
                'confidence': confidence,
                'prediction': prediction,
                'modules_used': list(result['modules_output'].keys())
            })
            
            result['success'] = True
            
        except Exception as e:
            error_msg = f'Error en procesamiento: {str(e)}'
            logger.error(error_msg)
            logger.error(traceback.format_exc())
            
            self._send_update('error', {
                'message': error_msg,
                'traceback': traceback.format_exc()
            })
            
            result['errors'].append(error_msg)
        
        return result
    
    async def _process_vjepa(self, puzzle_data: Dict) -> Dict:
        """Procesa con V-JEPA y muestra resultado REAL"""
        output = {
            'available': False,
            'processed': False,
            'result': None,
            'error': None
        }
        
        if not self.vjepa:
            self._send_update('vjepa_observation', {
                'message': 'V-JEPA no disponible - m√≥dulo no cargado',
                'observation': None
            })
            output['error'] = 'Module not loaded'
            return output
        
        try:
            # Procesar primer ejemplo de entrenamiento
            first_example = puzzle_data['train'][0]
            input_matrix = np.array(first_example['input'])
            output_matrix = np.array(first_example['output'])
            
            self._send_update('vjepa_observation', {
                'message': f'Procesando matriz {input_matrix.shape} con V-JEPA...'
            })
            
            # Para V-JEPA ARC Solver, primero iniciar nuevo puzzle y aprender de TODOS los ejemplos
            if hasattr(self.vjepa, 'start_new_puzzle'):
                # Versi√≥n ARC compliant - aprende de todos los ejemplos de entrenamiento
                self.vjepa.start_new_puzzle(puzzle_data.get('id', 'unknown'))
                
                # Aprender de TODOS los ejemplos de entrenamiento
                learning_result = self.vjepa.learn_from_examples(puzzle_data['train'])
                
                # Preparar observaci√≥n con el resultado del aprendizaje
                observation = {
                    'arc_compliant': True,
                    'examples_learned': learning_result['examples_learned'],
                    'pattern_detected': learning_result['pattern_detected'],
                    'confidence': learning_result.get('confidence', 0.0),
                    'transformations': learning_result.get('transformations', [])
                }
                
                # Si hay test, intentar predecir
                if puzzle_data.get('test') and len(puzzle_data['test']) > 0:
                    test_input = np.array(puzzle_data['test'][0].get('input', []))
                    prediction, confidence = self.vjepa.predict(test_input)
                    observation['test_prediction'] = {
                        'has_prediction': True,
                        'confidence': confidence,
                        'shape': prediction.shape if isinstance(prediction, np.ndarray) else None
                    }
                    # Guardar predicci√≥n para uso posterior
                    self.vjepa_prediction = prediction
                    observation['confidence'] = max(observation['confidence'], confidence)
            else:
                # Versi√≥n b√°sica - procesa solo el primer ejemplo
                observation = self.vjepa.observe(input_matrix, output_matrix)
            
            # Procesar resultado dependiendo del tipo de V-JEPA
            if 'arc_compliant' in observation:  # Versi√≥n ARC compliant
                processed_observation = {
                    'arc_compliant': True,
                    'examples_learned': observation.get('examples_learned', 0),
                    'pattern_detected': observation.get('pattern_detected', 'unknown'),
                    'confidence': observation.get('confidence', 0.0),
                    'transformations': observation.get('transformations', []),
                    'test_prediction': observation.get('test_prediction', None)
                }
                
                # Mensaje m√°s detallado
                pattern_type = processed_observation['pattern_detected']
                confidence_pct = int(processed_observation['confidence'] * 100)
                message = f'V-JEPA ARC: {processed_observation["examples_learned"]} ejemplos aprendidos | Patr√≥n: {pattern_type} | Confianza: {confidence_pct}%'
                
                # Detalles de transformaciones detectadas si existen
                if processed_observation['transformations']:
                    trans_types = [t.get('type', 'unknown') for t in processed_observation['transformations']]
                    unique_types = list(set(trans_types))
                    if unique_types:
                        message += f' | Tipos: {", ".join(unique_types)}'
                
            elif 'recognized' in observation:  # Versi√≥n con memoria persistente (no ARC compliant)
                processed_observation = {
                    'recognized': observation.get('recognized', False),
                    'transformation_type': observation.get('transformation_type', 'unknown'),
                    'confidence': observation.get('confidence', 0.0),
                    'examples_seen': observation.get('examples_seen', 0),
                    'similar_patterns': observation.get('similar_patterns', 0),
                    'memory_size': observation.get('memory_size', 0)
                }
                
                message = observation.get('message', f'V-JEPA: {processed_observation["transformation_type"]}')
                
                # Agregar estad√≠sticas si est√°n disponibles
                if hasattr(self.vjepa, 'get_statistics'):
                    stats = self.vjepa.get_statistics()
                    processed_observation['stats'] = stats
                    
            else:  # Versi√≥n b√°sica sin memoria
                processed_observation = {
                    'observed': observation.get('observed', False),
                    'pattern_type': observation.get('emergent_pattern', {}).get('type', 'unknown'),
                    'confidence': observation.get('emergent_pattern', {}).get('confidence', 0.0),
                    'latent_dims': len(observation.get('latent_difference', [])) if 'latent_difference' in observation else 0,
                    'transform_dims': len(observation.get('transform_embedding', [])) if 'transform_embedding' in observation else 0,
                    'non_zero_features': int(np.count_nonzero(observation.get('latent_difference', []))) if 'latent_difference' in observation else 0
                }
                message = f'V-JEPA: Patr√≥n {processed_observation.get("pattern_type", "unknown")} detectado'
            
            # Enviar resultado REAL
            self._send_update('vjepa_observation', {
                'message': message,
                'observation': processed_observation,
                'has_memory': 'recognized' in observation
            })
            
            output['available'] = True
            output['processed'] = True
            output['result'] = observation
            
        except Exception as e:
            error_msg = f'Error real en V-JEPA: {str(e)}'
            self._send_update('vjepa_observation', {
                'message': error_msg,
                'observation': None,
                'error': str(e)
            })
            output['error'] = str(e)
            
        return output
    
    async def _process_attention(self, puzzle_data: Dict) -> Dict:
        """Procesa con atenci√≥n iterativa y muestra pasos REALES"""
        output = {
            'available': False,
            'processed': False,
            'iterations': 0,
            'understanding': None,
            'error': None
        }
        
        if not self.attention:
            self._send_update('attention_update', {
                'message': 'Sistema de atenci√≥n no disponible',
                'iteration': 0
            })
            output['error'] = 'Module not loaded'
            return output
        
        try:
            first_example = puzzle_data['train'][0]
            input_matrix = np.array(first_example['input'])
            output_matrix = np.array(first_example['output'])
            
            # Hookear el proceso de atenci√≥n para enviar updates reales
            original_reasoning_steps = []
            
            # Observar hasta comprender
            scene_understanding = self.attention.observe_until_understood(
                input_matrix, 
                output_matrix,
                visualize=False
            )
            
            # Enviar cada paso de razonamiento real
            for i, step in enumerate(scene_understanding.reasoning_chain[:5]):  # Max 5 pasos
                await asyncio.sleep(0.1)  # Peque√±a pausa para que se vea el proceso
                self._send_update('attention_update', {
                    'iteration': i + 1,
                    'focus': step,
                    'understanding': f'Confianza: {scene_understanding.confidence:.2%}'
                })
            
            output['available'] = True
            output['processed'] = True
            output['iterations'] = scene_understanding.iterations_needed
            output['understanding'] = {
                'global': scene_understanding.global_understanding,
                'confidence': scene_understanding.confidence,
                'relationships': len(scene_understanding.relationships_found)
            }
            
        except Exception as e:
            error_msg = f'Error real en atenci√≥n: {str(e)}'
            self._send_update('attention_update', {
                'message': error_msg,
                'iteration': 0,
                'error': str(e)
            })
            output['error'] = str(e)
            
        return output
    
    async def _process_memory(self, puzzle_data: Dict) -> Dict:
        """Accede a memoria real y muestra resultados"""
        output = {
            'available': False,
            'accessed': False,
            'patterns_found': 0,
            'error': None
        }
        
        if not self.memory:
            self._send_update('memory_access', {
                'operation': 'search',
                'result': 'Memoria no disponible'
            })
            output['error'] = 'Module not loaded'
            return output
        
        try:
            # Buscar patrones similares en memoria
            self._send_update('memory_access', {
                'operation': 'search',
                'result': 'Buscando patrones similares...'
            })
            
            # Crear query de b√∫squeda
            first_example = puzzle_data['train'][0]
            input_matrix = np.array(first_example['input'])
            
            # Buscar en memoria real
            similar_patterns = self.memory.search_similar_patterns(
                pattern_type='transformation',
                query_data={'shape': input_matrix.shape}
            )
            
            self._send_update('memory_access', {
                'operation': 'search_complete',
                'result': f'Encontrados {len(similar_patterns)} patrones similares',
                'count': len(similar_patterns)
            })
            
            output['available'] = True
            output['accessed'] = True
            output['patterns_found'] = len(similar_patterns)
            
        except Exception as e:
            error_msg = f'Error real en memoria: {str(e)}'
            self._send_update('memory_access', {
                'operation': 'error',
                'result': error_msg
            })
            output['error'] = str(e)
            
        return output
    
    async def _process_hierarchical(self, puzzle_data: Dict, vjepa_context: Dict = None) -> Dict:
        """Procesa con An√°lisis Jer√°rquico y muestra capas de abstracci√≥n"""
        output = {
            'available': False,
            'processed': False,
            'layers': None,
            'error': None
        }
        
        if not self.hierarchical:
            output['error'] = 'Module not loaded'
            return output
        
        try:
            # Analizar primer ejemplo de entrenamiento
            first_example = puzzle_data['train'][0]
            input_matrix = np.array(first_example['input'])
            output_matrix = np.array(first_example['output'])
            
            # Incluir contexto de V-JEPA si est√° disponible
            vjepa_info = ""
            if vjepa_context and vjepa_context.get('processed'):
                vjepa_info = " (con contexto visual de V-JEPA)"
            
            self._send_update('hierarchical_update', {
                'message': f'Analizando capas de abstracci√≥n{vjepa_info}...',
                'status': 'processing',
                'has_vjepa_context': bool(vjepa_context and vjepa_context.get('processed'))
            })
            
            # Analizar capas jer√°rquicas
            self._send_update('hierarchical_update', {
                'message': f'Analizando matriz {input_matrix.shape} -> {output_matrix.shape}',
                'status': 'analyzing'
            })
            
            # El HierarchicalAnalyzer analiza cada matriz por separado
            input_analysis = self.hierarchical.analyze_full_hierarchy(input_matrix)
            output_analysis = self.hierarchical.analyze_full_hierarchy(output_matrix)
            
            # Extraer informaci√≥n relevante del an√°lisis
            def extract_summary(analysis_result):
                if not analysis_result:
                    return {'objects': 0, 'relations': 0, 'patterns': 0}
                
                summary = {
                    'objects': analysis_result.get('level_1_objects', {}).get('num_objects', 0),
                    'relations': analysis_result.get('level_2_relations', {}).get('num_relations', 0),
                    'patterns': analysis_result.get('level_3_patterns', {}).get('num_patterns', 0),
                    'pixels': len(analysis_result.get('level_0_pixels', {}).get('pixels', [])),
                    'shape_types': list(analysis_result.get('level_1_objects', {}).get('shape_distribution', {}).keys())
                }
                return summary
            
            input_summary = extract_summary(input_analysis)
            output_summary = extract_summary(output_analysis)
            
            # Combinar an√°lisis
            analysis = {
                'input_analysis': input_summary,
                'output_analysis': output_summary,
                'transformation_type': 'hierarchical_analysis',
                'confidence': 0.5,
                'macro_patterns': output_summary.get('patterns', 0),
                'meso_patterns': output_summary.get('objects', 0),
                'micro_patterns': output_summary.get('pixels', 0)
            }
            
            # Extraer informaci√≥n detallada de cada capa
            layers_info = {
                'macro': analysis.get('macro_patterns', []),
                'meso': analysis.get('meso_patterns', []),
                'micro': analysis.get('micro_patterns', [])
            }
            
            # Enviar informaci√≥n detallada de lo que encontr√≥
            if analysis:
                self._send_update('hierarchical_update', {
                    'message': 'An√°lisis detallado de capas:',
                    'details': {
                        'transformation_type': analysis.get('transformation_type', 'unknown'),
                        'confidence': analysis.get('confidence', 0.0),
                        'features_detected': analysis.get('features', {})
                    }
                })
            
            # Enviar resumen m√°s detallado
            self._send_update('hierarchical_update', {
                'message': 'An√°lisis jer√°rquico completado',
                'layers': layers_info,
                'patterns_found': {
                    'macro': f"Patrones: {output_summary.get('patterns', 0)}",
                    'meso': f"Objetos: {output_summary.get('objects', 0)}",
                    'micro': f"P√≠xeles: {output_summary.get('pixels', 0)}"
                },
                'input_summary': f"Input: {input_summary.get('objects', 0)} objetos, {input_summary.get('pixels', 0)} p√≠xeles activos",
                'output_summary': f"Output: {output_summary.get('objects', 0)} objetos, {output_summary.get('pixels', 0)} p√≠xeles activos",
                'shapes_detected': input_summary.get('shape_types', [])
            })
            
            output['available'] = True
            output['processed'] = True
            output['layers'] = layers_info
            
        except Exception as e:
            output['error'] = f'Error en an√°lisis jer√°rquico: {str(e)}'
            self._send_update('hierarchical_update', {
                'message': f'Error: {str(e)}',
                'status': 'error'
            })
        
        return output
    
    async def _generate_prediction(self, puzzle_data: Dict, 
                                  vjepa_output: Dict,
                                  attention_output: Dict, 
                                  memory_output: Dict) -> Optional[List]:
        """Genera predicci√≥n basada en outputs REALES de los m√≥dulos"""
        
        self._send_update('reasoning_step', {
            'step': 'Generando predicci√≥n basada en m√≥dulos activos...'
        })
        
        # Verificar si V-JEPA ya gener√≥ una predicci√≥n
        if hasattr(self, 'vjepa_prediction') and self.vjepa_prediction is not None:
            self._send_update('reasoning_step', {
                'step': '‚úÖ Usando predicci√≥n generada por V-JEPA ARC'
            })
            prediction = self.vjepa_prediction
            # Limpiar para pr√≥ximo puzzle
            self.vjepa_prediction = None
            
            # Convertir a lista si es numpy array
            if isinstance(prediction, np.ndarray):
                return prediction.tolist()
            return prediction
        
        # Si no hay predicci√≥n de V-JEPA, contar m√≥dulos activos
        modules_working = sum([
            vjepa_output.get('processed', False),
            attention_output.get('processed', False),
            memory_output.get('accessed', False)
        ])
        
        if modules_working == 0:
            self._send_update('reasoning_step', {
                'step': '‚ùå No hay m√≥dulos funcionando - no se puede generar predicci√≥n'
            })
            return None
        
        # Intentar usar la informaci√≥n disponible
        try:
            test_input = np.array(puzzle_data['test'][0]['input'])
            
            # Si el an√°lisis jer√°rquico tiene informaci√≥n, √∫sala
            if self.modules_status.get('hierarchical') == 'initialized':
                self._send_update('reasoning_step', {
                    'step': f'Predicci√≥n basada en an√°lisis jer√°rquico (m√≥dulos activos: {modules_working}/3)'
                })
            else:
                self._send_update('reasoning_step', {
                    'step': f'Predicci√≥n b√°sica generada (m√≥dulos activos: {modules_working}/3)'
                })
            
            return test_input.tolist()
            
        except Exception as e:
            self._send_update('reasoning_step', {
                'step': f'Error generando predicci√≥n: {str(e)}'
            })
            return None
    
    def _calculate_real_confidence(self, modules_output: Dict) -> float:
        """Calcula confianza REAL basada en m√≥dulos que funcionaron"""
        confidence = 0.0
        active_modules = 0
        
        # V-JEPA (peso mayor por ser el m√≥dulo principal en ARC)
        if modules_output.get('vjepa', {}).get('processed'):
            active_modules += 1
            vjepa_result = modules_output['vjepa'].get('result', {})
            vjepa_conf = vjepa_result.get('confidence', 0.0)
            
            # Si es ARC compliant y detect√≥ un patr√≥n consistente, dar m√°s peso
            if vjepa_result.get('arc_compliant') and vjepa_result.get('pattern_detected') == 'consistent_transformation':
                confidence += vjepa_conf * 0.5  # Mayor peso para V-JEPA ARC
            else:
                confidence += vjepa_conf * 0.3
        
        # Atenci√≥n
        if modules_output.get('attention', {}).get('processed'):
            active_modules += 1
            att_conf = modules_output['attention'].get('understanding', {}).get('confidence', 0.5)
            confidence += att_conf * 0.4
        
        # Memoria
        if modules_output.get('memory', {}).get('accessed'):
            active_modules += 1
            patterns = modules_output['memory'].get('patterns_found', 0)
            mem_conf = min(patterns / 10, 1.0)  # Max 1.0 si hay 10+ patrones
            confidence += mem_conf * 0.3
        
        # Si no hay m√≥dulos activos, confianza 0
        if active_modules == 0:
            return 0.0
        
        # Ajustar por n√∫mero de m√≥dulos activos
        confidence = confidence * (active_modules / 3)
        
        return min(confidence, 1.0)