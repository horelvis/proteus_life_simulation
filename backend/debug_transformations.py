#!/usr/bin/env python3
"""
Debug: Rastrear qu√© hace exactamente las transformaciones
"""

import numpy as np
from arc import HybridProteusARCSolver
from arc.arc_solver_python import ARCSolverPython, TransformationType
from arc.emergent_rule_system import EmergentRuleSystem

def debug_transformation_chain():
    """Rastrea toda la cadena de transformaciones"""
    
    print("="*70)
    print("üîç RASTREO DE TRANSFORMACIONES")
    print("="*70)
    
    # Caso simple: expandir cruz
    train_examples = [
        {
            "input": np.array([[0, 0, 0], [0, 1, 0], [0, 0, 0]]),
            "output": np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])
        }
    ]
    
    test_input = np.array([[0, 0, 0], [0, 3, 0], [0, 0, 0]])
    expected = np.array([[0, 3, 0], [3, 3, 3], [0, 3, 0]])
    
    print("üìä Input:")
    print(test_input)
    print("\n‚úÖ Esperado:")
    print(expected)
    
    print("\n" + "="*70)
    print("1Ô∏è‚É£ CADENA EN ARCSolverPython")
    print("="*70)
    
    solver = ARCSolverPython()
    
    # Ver qu√© regla detecta
    print("\nüîç Detecci√≥n de regla:")
    rule = solver.detect_rule(train_examples[0]['input'], train_examples[0]['output'])
    print(f"Regla detectada: {rule}")
    
    if rule:
        print(f"\nüìù Aplicando regla '{rule.get('type', 'Unknown')}'...")
        print(f"Par√°metros: {rule.get('parameters', {})}")
        
        # Aplicar la regla
        result = solver.apply_rule(rule, test_input)
        print(f"\nüì§ Resultado:")
        print(result)
        print(f"¬øCorrecto? {'‚úÖ' if np.array_equal(result, expected) else '‚ùå'}")
    
    # Probar cada tipo de transformaci√≥n directamente
    print("\n" + "="*70)
    print("2Ô∏è‚É£ PRUEBA DIRECTA DE TRANSFORMACIONES")
    print("="*70)
    
    # Mapear las funciones de transformaci√≥n
    transformations = {
        'pattern_replication': solver._apply_pattern_replication,
        'fill_shape': solver._apply_fill_shape,
        'color_mapping': solver._apply_color_mapping,
        'rotation': solver._apply_rotation,
        'reflection': solver._apply_reflection,
        'gravity': solver._apply_gravity,
        'line_drawing': solver._apply_line_drawing,
    }
    
    print("\nüß™ Probando cada transformaci√≥n:")
    for name, func in transformations.items():
        print(f"\n‚Ä¢ {name}:")
        try:
            # Diferentes par√°metros seg√∫n la funci√≥n
            if name == 'pattern_replication':
                result = func(test_input, 3)  # factor 3
            elif name == 'fill_shape':
                result = func(test_input, 3)  # color 3
            elif name == 'color_mapping':
                result = func(test_input, {0: 0, 3: 3})  # mapeo identidad
            elif name == 'rotation':
                result = func(test_input, 90)
            elif name == 'reflection':
                result = func(test_input, 'horizontal')
            elif name == 'gravity':
                result = func(test_input, 'down')
            elif name == 'line_drawing':
                result = func(test_input)
            else:
                result = func(test_input)
            
            print(f"  Resultado:\n{result}")
            if np.array_equal(result, expected):
                print(f"  ‚úÖ ¬°ESTA TRANSFORMACI√ìN PRODUCE EL RESULTADO CORRECTO!")
        except Exception as e:
            print(f"  ‚ùå Error: {e}")
    
    print("\n" + "="*70)
    print("3Ô∏è‚É£ CADENA EN EmergentRuleSystem")
    print("="*70)
    
    emergent = EmergentRuleSystem()
    rules = emergent.extract_rules_from_examples(train_examples)
    
    print("\nüìä Reglas emergentes extra√≠das:")
    print(f"‚Ä¢ Micro-reglas: {len(rules['micro_rules'])}")
    print(f"‚Ä¢ Meso-reglas: {len(rules['meso_rules'])}")
    print(f"‚Ä¢ Macro-reglas: {len(rules['macro_rules'])}")
    
    # Ver qu√© hace apply_emergent_rules paso a paso
    print("\nüîç Aplicando reglas emergentes...")
    
    # Rastrear macro-reglas
    if emergent.macro_rules:
        best_macro = max(emergent.macro_rules, key=lambda r: r.confidence)
        print(f"\nMacro-regla seleccionada: {best_macro.rule_type}")
        print(f"Confianza: {best_macro.confidence:.2%}")
        print(f"Transformaci√≥n global: {best_macro.global_transform}")
    
    # Rastrear meso-reglas
    if emergent.meso_rules:
        print("\nMeso-reglas a aplicar:")
        for meso in emergent.meso_rules[:3]:
            print(f"  ‚Ä¢ {meso.transformation} (confianza: {meso.confidence:.2%})")
    
    # Aplicar
    result = emergent.apply_emergent_rules(test_input)
    print(f"\nüì§ Resultado emergente:")
    print(result)
    print(f"¬øCorrecto? {'‚úÖ' if np.array_equal(result, expected) else '‚ùå'}")
    
    print("\n" + "="*70)
    print("4Ô∏è‚É£ AN√ÅLISIS DE LA TRANSFORMACI√ìN CORRECTA")
    print("="*70)
    
    print("\nüéØ La transformaci√≥n correcta ser√≠a:")
    print("1. Detectar el p√≠xel central no-cero (3 en posici√≥n [1,1])")
    print("2. Expandir a las 4 posiciones cardinales:")
    print("   - Arriba: [0,1] = 3")
    print("   - Abajo: [2,1] = 3")
    print("   - Izquierda: [1,0] = 3")
    print("   - Derecha: [1,2] = 3")
    
    # Implementar manualmente la transformaci√≥n correcta
    print("\n‚ú® Implementaci√≥n manual correcta:")
    manual_result = test_input.copy()
    center_val = test_input[1, 1]
    if center_val != 0:
        # Expandir cruz
        manual_result[0, 1] = center_val  # arriba
        manual_result[2, 1] = center_val  # abajo
        manual_result[1, 0] = center_val  # izquierda
        manual_result[1, 2] = center_val  # derecha
    
    print(manual_result)
    print(f"¬øCorrecto? {'‚úÖ' if np.array_equal(manual_result, expected) else '‚ùå'}")

def trace_apply_rule():
    """Rastrea espec√≠ficamente apply_rule"""
    
    print("\n" + "="*70)
    print("5Ô∏è‚É£ RASTREO DE apply_rule")
    print("="*70)
    
    solver = ARCSolverPython()
    
    # Crear regla manual para expansi√≥n de cruz
    rule = {
        'type': 'pattern_replication',
        'confidence': 0.9,
        'parameters': {'factor': 3}
    }
    
    test_input = np.array([[0, 0, 0], [0, 3, 0], [0, 0, 0]])
    
    print(f"\nüìù Regla: {rule}")
    print(f"üìä Input:\n{test_input}")
    
    # Ver qu√© hace apply_rule
    print(f"\nüîç Llamando apply_rule con tipo '{rule['type']}'...")
    
    # Rastrear el flujo
    from arc.arc_solver_python import TransformationType
    
    rule_type = TransformationType(rule['type'])
    print(f"TransformationType: {rule_type}")
    print(f"Es PATTERN_REPLICATION? {rule_type == TransformationType.PATTERN_REPLICATION}")
    
    # Aplicar
    result = solver.apply_rule(rule, test_input)
    print(f"\nüì§ Resultado de apply_rule:")
    print(result)
    
    # Probar directamente _apply_pattern_replication
    print(f"\nüîß Llamada directa a _apply_pattern_replication:")
    direct_result = solver._apply_pattern_replication(test_input, 3)
    print(direct_result)
    
    # Ver dimensiones
    print(f"\nDimensiones:")
    print(f"  Input: {test_input.shape}")
    print(f"  Resultado apply_rule: {result.shape}")
    print(f"  Resultado directo: {direct_result.shape}")

def check_fill_shape():
    """Verifica espec√≠ficamente fill_shape"""
    
    print("\n" + "="*70)
    print("6Ô∏è‚É£ VERIFICACI√ìN DE fill_shape")
    print("="*70)
    
    solver = ARCSolverPython()
    
    # Caso de prueba para fill
    test_input = np.array([
        [3, 0, 3],
        [3, 0, 3],
        [3, 3, 3]
    ])
    
    print("üìä Input (forma a rellenar):")
    print(test_input)
    
    # Aplicar fill_shape
    result = solver._apply_fill_shape(test_input, 3)
    print("\nüì§ Resultado de _apply_fill_shape:")
    print(result)
    
    print("\nüîç An√°lisis del algoritmo actual:")
    print("El algoritmo actual solo rellena si hay 3+ vecinos no-cero")
    print("Esto NO detecta formas cerradas correctamente")
    
    print("\n‚ú® Algoritmo correcto deber√≠a:")
    print("1. Detectar regiones cerradas por cada color")
    print("2. Usar flood-fill o binary_fill_holes")
    print("3. Rellenar completamente el interior")

def main():
    print("="*70)
    print("üî¨ DEBUG COMPLETO DE TRANSFORMACIONES")
    print("="*70)
    
    # Rastrear toda la cadena
    debug_transformation_chain()
    
    # Rastrear apply_rule espec√≠ficamente
    trace_apply_rule()
    
    # Verificar fill_shape
    check_fill_shape()
    
    print("\n" + "="*70)
    print("üìä RESUMEN DEL PROBLEMA")
    print("="*70)
    
    print("\n‚ùå PROBLEMAS IDENTIFICADOS:")
    print("1. _apply_pattern_replication espera factor de escala, no expansi√≥n de cruz")
    print("2. _apply_fill_shape solo rellena con 3+ vecinos, no detecta formas cerradas")
    print("3. No hay transformaci√≥n espec√≠fica para 'expandir cruz'")
    print("4. apply_rule no maneja correctamente algunos tipos de transformaci√≥n")
    
    print("\n‚úÖ SOLUCI√ìN NECESARIA:")
    print("1. Implementar transformaci√≥n 'expand_cross' espec√≠fica")
    print("2. Mejorar _apply_fill_shape con flood-fill real")
    print("3. Agregar m√°s transformaciones b√°sicas")
    print("4. Mejorar la detecci√≥n de patrones")

if __name__ == "__main__":
    main()