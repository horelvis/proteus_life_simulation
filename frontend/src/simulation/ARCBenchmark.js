/**
 * Sistema de benchmark para evaluar capacidades de razonamiento en ARC
 */

export class ARCBenchmark {
  constructor() {
    this.categor√≠as = {
      // Nivel 1: Transformaciones b√°sicas
      color_mapping: { peso: 1, nombre: "Mapeo de colores" },
      pattern_replication: { peso: 2, nombre: "Replicaci√≥n de patrones" },
      
      // Nivel 2: Transformaciones espaciales
      reflection: { peso: 3, nombre: "Reflexi√≥n/Espejo" },
      rotation: { peso: 3, nombre: "Rotaci√≥n" },
      fill_shape: { peso: 3, nombre: "Rellenar formas" },
      
      // Nivel 3: Razonamiento l√≥gico
      counting: { peso: 4, nombre: "Contar objetos" },
      pattern_extraction: { peso: 4, nombre: "Extracci√≥n de patrones" },
      physics_gravity: { peso: 4, nombre: "F√≠sica/Gravedad" },
      
      // Nivel 4: Razonamiento abstracto
      symmetry_detection: { peso: 5, nombre: "Detecci√≥n de simetr√≠a" },
      line_drawing: { peso: 5, nombre: "Dibujar l√≠neas/conexiones" }
    };
    
    this.nivelesDificultad = {
      very_easy: 1,
      easy: 2,
      medium: 3,
      hard: 4,
      very_hard: 5
    };
  }
  
  /**
   * Eval√∫a los resultados y genera m√©tricas de razonamiento
   */
  evaluarResultados(resultados, puzzles) {
    const evaluaci√≥n = {
      porCategor√≠a: {},
      porDificultad: {},
      general: {
        totalPuzzles: puzzles.length,
        resueltos: 0,
        intentosPromedio: 0,
        tiempoPromedio: 0
      },
      capacidadesDetectadas: [],
      porcentajeRazonamiento: 0,
      nivelRazonamiento: "",
      recomendaciones: []
    };
    
    // Inicializar contadores
    Object.keys(this.categor√≠as).forEach(cat => {
      evaluaci√≥n.porCategor√≠a[cat] = {
        total: 0,
        resueltos: 0,
        porcentaje: 0,
        nombre: this.categor√≠as[cat].nombre
      };
    });
    
    Object.keys(this.nivelesDificultad).forEach(dif => {
      evaluaci√≥n.porDificultad[dif] = {
        total: 0,
        resueltos: 0,
        porcentaje: 0
      };
    });
    
    // Procesar resultados
    resultados.forEach((resultado, idx) => {
      const puzzle = puzzles[idx];
      
      if (resultado.resuelto) {
        evaluaci√≥n.general.resueltos++;
      }
      
      evaluaci√≥n.general.intentosPromedio += resultado.intentos || 0;
      evaluaci√≥n.general.tiempoPromedio += resultado.tiempo || 0;
      
      // Por categor√≠a
      if (puzzle.category) {
        evaluaci√≥n.porCategor√≠a[puzzle.category].total++;
        if (resultado.resuelto) {
          evaluaci√≥n.porCategor√≠a[puzzle.category].resueltos++;
        }
      }
      
      // Por dificultad
      if (puzzle.difficulty) {
        evaluaci√≥n.porDificultad[puzzle.difficulty].total++;
        if (resultado.resuelto) {
          evaluaci√≥n.porDificultad[puzzle.difficulty].resueltos++;
        }
      }
    });
    
    // Calcular promedios
    if (resultados.length > 0) {
      evaluaci√≥n.general.intentosPromedio /= resultados.length;
      evaluaci√≥n.general.tiempoPromedio /= resultados.length;
    }
    
    // Calcular porcentajes por categor√≠a
    let puntajeTotal = 0;
    let puntajeM√°ximo = 0;
    
    Object.keys(evaluaci√≥n.porCategor√≠a).forEach(cat => {
      const catData = evaluaci√≥n.porCategor√≠a[cat];
      if (catData.total > 0) {
        catData.porcentaje = (catData.resueltos / catData.total) * 100;
        
        // Calcular puntaje ponderado
        const peso = this.categor√≠as[cat].peso;
        puntajeTotal += catData.resueltos * peso;
        puntajeM√°ximo += catData.total * peso;
        
        // Detectar capacidades
        if (catData.porcentaje > 0) {
          evaluaci√≥n.capacidadesDetectadas.push({
            capacidad: catData.nombre,
            nivel: this.getNivelCapacidad(catData.porcentaje)
          });
        }
      }
    });
    
    // Calcular porcentaje de razonamiento general
    if (puntajeM√°ximo > 0) {
      evaluaci√≥n.porcentajeRazonamiento = (puntajeTotal / puntajeM√°ximo) * 100;
    }
    
    // Determinar nivel de razonamiento
    evaluaci√≥n.nivelRazonamiento = this.getNivelRazonamiento(evaluaci√≥n.porcentajeRazonamiento);
    
    // Generar recomendaciones
    evaluaci√≥n.recomendaciones = this.generarRecomendaciones(evaluaci√≥n);
    
    // Comparar con benchmarks
    evaluaci√≥n.comparaci√≥n = this.compararConBenchmarks(evaluaci√≥n.porcentajeRazonamiento);
    
    return evaluaci√≥n;
  }
  
  getNivelCapacidad(porcentaje) {
    if (porcentaje >= 80) return "Excelente";
    if (porcentaje >= 60) return "Bueno";
    if (porcentaje >= 40) return "B√°sico";
    if (porcentaje >= 20) return "Emergente";
    return "No detectado";
  }
  
  getNivelRazonamiento(porcentaje) {
    if (porcentaje >= 90) return "üèÜ Nivel superhuman";
    if (porcentaje >= 75) return "ü•á Nivel humano experto";
    if (porcentaje >= 60) return "ü•à Nivel humano promedio";
    if (porcentaje >= 40) return "ü•â Nivel humano b√°sico";
    if (porcentaje >= 20) return "üî∞ Razonamiento emergente";
    if (porcentaje >= 10) return "üå± Indicios de razonamiento";
    if (porcentaje >= 5) return "‚ö° Comportamiento reactivo";
    return "‚ùå Sin razonamiento detectado";
  }
  
  generarRecomendaciones(evaluaci√≥n) {
    const recs = [];
    
    // Analizar categor√≠as d√©biles
    Object.entries(evaluaci√≥n.porCategor√≠a).forEach(([cat, data]) => {
      if (data.total > 0 && data.porcentaje < 50) {
        recs.push({
          tipo: "mejora",
          √°rea: data.nombre,
          sugerencia: `Mejorar capacidad de ${data.nombre.toLowerCase()}. Actualmente: ${data.porcentaje.toFixed(1)}%`
        });
      }
    });
    
    // Sugerir siguiente nivel
    if (evaluaci√≥n.porcentajeRazonamiento < 20) {
      recs.push({
        tipo: "fundamental",
        √°rea: "Razonamiento b√°sico",
        sugerencia: "Enfocarse en tareas muy simples (color_mapping) para establecer base"
      });
    } else if (evaluaci√≥n.porcentajeRazonamiento < 50) {
      recs.push({
        tipo: "progreso",
        √°rea: "Razonamiento espacial",
        sugerencia: "Avanzar a transformaciones espaciales (rotaci√≥n, reflexi√≥n)"
      });
    }
    
    return recs;
  }
  
  compararConBenchmarks(porcentaje) {
    return {
      vsRandom: porcentaje / 5, // Random ~5%
      vsGPT4: porcentaje / 30,  // GPT-4 ~30%
      vsHumanoPromedio: porcentaje / 85, // Humano ~85%
      vsHumanoExperto: porcentaje / 95  // Experto ~95%
    };
  }
  
  /**
   * Genera reporte visual detallado
   */
  generarReporteDetallado(evaluaci√≥n) {
    let reporte = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë        EVALUACI√ìN DE RAZONAMIENTO PROTEUS-AC         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìä RESULTADO GENERAL
${evaluaci√≥n.nivelRazonamiento}
Porcentaje de Razonamiento: ${evaluaci√≥n.porcentajeRazonamiento.toFixed(1)}%
Puzzles Resueltos: ${evaluaci√≥n.general.resueltos}/${evaluaci√≥n.general.totalPuzzles}

üìà AN√ÅLISIS POR CATEGOR√çA
`;
    
    Object.entries(evaluaci√≥n.porCategor√≠a).forEach(([cat, data]) => {
      if (data.total > 0) {
        const barras = this.generarBarraProgreso(data.porcentaje);
        reporte += `${data.nombre}: ${barras} ${data.porcentaje.toFixed(0)}%\n`;
      }
    });
    
    reporte += `
üß† CAPACIDADES DETECTADAS
`;
    
    evaluaci√≥n.capacidadesDetectadas.forEach(cap => {
      reporte += `‚úì ${cap.capacidad}: ${cap.nivel}\n`;
    });
    
    reporte += `
üîç COMPARACI√ìN CON BENCHMARKS
vs Random Walk: ${evaluaci√≥n.comparaci√≥n.vsRandom.toFixed(1)}x mejor
vs GPT-4: ${(evaluaci√≥n.comparaci√≥n.vsGPT4 * 100).toFixed(0)}% del rendimiento
vs Humano Promedio: ${(evaluaci√≥n.comparaci√≥n.vsHumanoPromedio * 100).toFixed(0)}% del rendimiento

üí° RECOMENDACIONES
`;
    
    evaluaci√≥n.recomendaciones.forEach(rec => {
      reporte += `‚Ä¢ ${rec.sugerencia}\n`;
    });
    
    return reporte;
  }
  
  generarBarraProgreso(porcentaje) {
    const longitud = 20;
    const llenos = Math.round(porcentaje / 100 * longitud);
    const vac√≠os = longitud - llenos;
    return '‚ñà'.repeat(llenos) + '‚ñë'.repeat(vac√≠os);
  }
}