/**
 * Sistema experimental para evaluar razonamiento con puzzles ARC
 */

import { validador } from './ReasoningValidator';
import { OrganismAC } from './OrganismAC';
import { ARCDataLoader } from './ARCDataLoader';
import { ARCBenchmark } from './ARCBenchmark';
import { ARCSolver } from './ARCSolver';

export class ARCExperiment {
  constructor() {
    this.puzzles = [];
    this.resultados = [];
    this.configuraci√≥n = {
      tama√±oPoblaci√≥n: 50,
      generacionesMax: 100,
      tiempoL√≠mitePorPuzzle: 300, // segundos
      permitirAprendizaje: false // Zero-shot por defecto
    };
    
    // Propiedades para visualizaci√≥n
    this.puzzleActual = null;
    this.gridActual = null;
    this.intentos = 0;
    this.tiempoTranscurrido = 0;
    this.generaci√≥nActual = 0;
    this.resuelto = false;
    this.validador = validador;
  }
  
  /**
   * Carga puzzles ARC para experimento
   */
  async cargarPuzzlesARC(tipo = 'training') {
    const loader = new ARCDataLoader();
    const arcPuzzles = await loader.loadPuzzles('sample');
    
    // Convertir al formato interno
    this.puzzles = arcPuzzles.map(puzzle => {
      const converted = loader.convertToInternalFormat(puzzle);
      
      // Analizar el puzzle para entender su naturaleza
      const analysis = loader.analyzePuzzle(puzzle);
      console.log(`üìä Puzzle ${puzzle.id}:`, analysis);
      
      return {
        ...converted,
        analysis: analysis
      };
    });
    
    console.log(`üìä Cargados ${this.puzzles.length} puzzles ARC reales`);
  }
  
  /**
   * Ejecuta experimento completo
   */
  async ejecutarExperimento(organismos) {
    console.log('üß™ Iniciando experimento ARC de razonamiento...');
    
    try {
      console.log('üìä Puzzles cargados:', this.puzzles.length);
      
      // Crear solucionador basado en CA
      const solver = new ARCSolver();
      
      // Evaluar cada puzzle
      for (const puzzle of this.puzzles) {
        console.log(`\nüß© Evaluando puzzle ${puzzle.id} (${puzzle.category})...`);
        
        // Aprender de ejemplos de entrenamiento
        if (puzzle.trainExamples && solver.aprender(puzzle.trainExamples)) {
          // Intentar resolver el test
          const inicio = Date.now();
          console.log(`üîç Input del puzzle ${puzzle.id}:`, puzzle.input);
          const solucion = solver.resolver(puzzle.input);
          console.log(`üéØ Soluci√≥n generada:`, solucion);
          console.log(`üìã Soluci√≥n esperada:`, puzzle.output);
          const tiempo = Date.now() - inicio;
          
          // Verificar si es correcto
          const correcto = JSON.stringify(solucion) === JSON.stringify(puzzle.output);
          
          if (correcto) {
            console.log(`‚úÖ ¬°Puzzle ${puzzle.id} resuelto!`);
          } else {
            console.log(`‚ùå Puzzle ${puzzle.id} incorrecto`);
          }
          
          this.resultados.push({
            puzzle: puzzle.id,
            resuelto: correcto,
            tiempo: tiempo,
            intentos: 1,
            analisis: { muestraRazonamiento: correcto }
          });
        } else {
          // No se pudo aprender regla
          console.log(`‚ö†Ô∏è No se pudo aprender regla para ${puzzle.id}`);
          this.resultados.push({
            puzzle: puzzle.id,
            resuelto: false,
            tiempo: 0,
            intentos: 0,
            analisis: { muestraRazonamiento: false }
          });
        }
      }
      
      return this.generarReporteFinal();
      
    } catch (error) {
      console.error('Error en experimento:', error);
      throw error;
    }
  }
  
  /**
   * Eval√∫a un puzzle espec√≠fico
   */
  async evaluarPuzzle(puzzle, organismos) {
    const sesi√≥n = validador.iniciarValidaci√≥n(puzzle, organismos);
    const inicio = Date.now();
    
    // Actualizar propiedades para visualizaci√≥n
    this.puzzleActual = puzzle;
    this.gridActual = JSON.parse(JSON.stringify(puzzle.input));
    this.intentos = 0;
    this.resuelto = false;
    
    // Crear entorno ARC para este puzzle
    const entornoARC = new ARCEnvironment(puzzle);
    
    // Bucle de evaluaci√≥n (limitado para testing)
    let generaci√≥n = 0;
    let resuelto = false;
    const maxIntentos = 50; // M√°s intentos para resolver
    let intentosActuales = 0;
    
    while (
      intentosActuales < maxIntentos && 
      !resuelto &&
      (Date.now() - inicio) < 10000 // 10 segundos por puzzle
    ) {
      intentosActuales++;
      
      // Cada organismo intenta resolver
      for (const organismo of organismos) {
        const acci√≥n = this.observarAcci√≥n(organismo, entornoARC);
        const resultado = entornoARC.aplicarAcci√≥n(acci√≥n);
        
        // Actualizar estado para visualizaci√≥n
        this.gridActual = entornoARC.getCurrentGrid();
        this.intentos++;
        this.tiempoTranscurrido = Date.now() - inicio;
        this.generaci√≥nActual = generaci√≥n;
        
        // Registrar intento
        validador.registrarIntento(sesi√≥n, organismo, acci√≥n, resultado);
        
        if (resultado.completo && resultado.correcto) {
          resuelto = true;
          this.resuelto = true;
          console.log(`‚úÖ ¬°Resuelto por organismo ${organismo.id}!`);
          break;
        }
      }
      
      // Evoluci√≥n (si est√° permitida)
      if (this.configuraci√≥n.permitirAprendizaje && !resuelto) {
        organismos = this.evolucionarPoblaci√≥n(organismos, entornoARC);
        generaci√≥n++;
      } else {
        break; // Zero-shot: una sola oportunidad
      }
    }
    
    return {
      puzzle: puzzle.id,
      resuelto: resuelto,
      generaciones: generaci√≥n,
      tiempo: Date.now() - inicio,
      intentos: sesi√≥n.intentos.length,
      an√°lisis: validador.analizarEmergencia([sesi√≥n])
    };
  }
  
  /**
   * Observa y registra la acci√≥n del organismo
   */
  observarAcci√≥n(organismo, entornoARC) {
    // El organismo "ve" el puzzle como parte de su entorno
    const percepci√≥n = {
      gridInput: entornoARC.getInputGrid(),
      gridActual: entornoARC.getCurrentGrid(),
      posici√≥nOrganismo: organismo.position
    };
    
    // Actualizar sensores del CA con informaci√≥n del puzzle
    this.actualizarSensoresARC(organismo, percepci√≥n);
    
    // El CA procesa y genera acci√≥n
    organismo.cellularAutomaton.update(0.1);
    
    // Traducir efectores del CA a acci√≥n sobre el grid
    return {
      tipo: this.determinarTipoAcci√≥n(organismo),
      posici√≥n: this.calcularPosici√≥nObjetivo(organismo, entornoARC),
      valor: this.determinarValor(organismo),
      
      // Metadatos para an√°lisis
      activaci√≥nCA: organismo.cellularAutomaton.getVisualizationData(),
      confianza: this.calcularConfianza(organismo)
    };
  }
  
  /**
   * Actualiza sensores del CA con info del puzzle ARC
   */
  actualizarSensoresARC(organismo, percepci√≥n) {
    const ca = organismo.cellularAutomaton;
    const gridInput = percepci√≥n.gridInput;
    const gridActual = percepci√≥n.gridActual;
    
    // Detectar diferencias entre input y actual
    let diferencias = 0;
    let celdas1s = 0;
    
    for (let i = 0; i < gridInput.length; i++) {
      for (let j = 0; j < gridInput[i].length; j++) {
        if (gridInput[i][j] !== gridActual[i][j]) {
          diferencias++;
        }
        if (gridInput[i][j] === 1) {
          celdas1s++;
        }
      }
    }
    
    // Mapear a sensores del CA
    // Si hay muchos 1s, generar "chemical gradient" alto
    ca.sensors.chemicalGradient = celdas1s / (gridInput.length * gridInput[0].length);
    
    // Si ya hicimos cambios, reducir gradiente
    if (diferencias > 0) {
      ca.sensors.chemicalGradient *= (1 - diferencias / celdas1s);
    }
    
    // Direcci√≥n hacia el pr√≥ximo 1 sin cambiar
    let found = false;
    for (let i = 0; i < gridInput.length && !found; i++) {
      for (let j = 0; j < gridInput[i].length && !found; j++) {
        if (gridInput[i][j] === 1 && gridActual[i][j] === 1) {
          ca.sensors.gradientDirection = Math.atan2(i - 2, j - 2);
          found = true;
        }
      }
    }
  }
  
  /**
   * Controles experimentales
   */
  async ejecutarControles() {
    console.log('üéÆ Ejecutando controles...');
    
    // 1. Random baseline
    for (const puzzle of this.puzzles) {
      const tasaRandom = validador.compararConRandom(puzzle);
      console.log(`  Random en ${puzzle.id}: ${(tasaRandom * 100).toFixed(1)}%`);
    }
    
    // 2. Sin evoluci√≥n
    const organismosFijos = this.crearOrganismosSinEvoluci√≥n();
    const resultadosBase = [];
    for (const puzzle of this.puzzles) {
      const resultado = await this.evaluarPuzzle(puzzle, organismosFijos);
      resultadosBase.push(resultado);
    }
    
    // Establecer baseline
    validador.establecerBaseline(resultadosBase);
  }
  
  /**
   * Crea organismos sin capacidad de evoluci√≥n
   */
  crearOrganismosSinEvoluci√≥n() {
    const organismos = [];
    for (let i = 0; i < 10; i++) {
      const org = new OrganismAC(
        Math.random() * 200,
        Math.random() * 200
      );
      // Marcar como no evolutivos
      org.puedeEvolucionar = false;
      organismos.push(org);
    }
    return organismos;
  }
  
  /**
   * Tests de ablaci√≥n sistem√°ticos
   */
  async ejecutarAblaciones(organismos) {
    console.log('\nüî¨ Tests de ablaci√≥n...');
    
    const reglas = [
      'chemotaxis',
      'phototaxis', 
      'homeostasis',
      'morphogenesis',
      'oscillator'
    ];
    
    for (const regla of reglas) {
      const impacto = validador.testAblaci√≥n(
        regla, 
        this.puzzles.slice(0, 3), // Subset para rapidez
        organismos
      );
      
      console.log(`  Sin ${regla}: ${(impacto * 100).toFixed(1)}% degradaci√≥n`);
    }
  }
  
  /**
   * Visualizaci√≥n en tiempo real
   */
  mostrarProgresoTiempoReal(resultado) {
    const s√≠mbolos = resultado.resuelto ? '‚úÖ' : '‚ùå';
    const tiempo = (resultado.tiempo / 1000).toFixed(1);
    
    console.log(`  ${s√≠mbolos} Tiempo: ${tiempo}s | Intentos: ${resultado.intentos}`);
    
    if (resultado.an√°lisis && resultado.an√°lisis.muestraRazonamiento) {
      console.log(`  üß† Evidencia de razonamiento detectada!`);
      console.log(`     - Mejora: ${(resultado.an√°lisis.mejora * 100).toFixed(1)}%`);
      console.log(`     - Diversidad: ${(resultado.an√°lisis.diversidad * 100).toFixed(1)}%`);
    }
  }
  
  /**
   * Genera reporte final del experimento
   */
  generarReporteFinal() {
    try {
      // Usar sistema de benchmark avanzado
      const benchmark = new ARCBenchmark();
      const evaluaci√≥n = benchmark.evaluarResultados(this.resultados, this.puzzles);
      
      // Generar reporte detallado
      const reporteDetallado = benchmark.generarReporteDetallado(evaluaci√≥n);
      console.log(reporteDetallado);
      
      // Formato para UI
      const reporte = {
        conclusi√≥n: evaluaci√≥n.nivelRazonamiento,
        
        arc: {
          puzzlesResueltos: evaluaci√≥n.general.resueltos,
          totalPuzzles: evaluaci√≥n.general.totalPuzzles,
          tasa√âxito: evaluaci√≥n.general.resueltos / evaluaci√≥n.general.totalPuzzles,
          tiempoPromedio: evaluaci√≥n.general.tiempoPromedio
        },
        
        // M√©tricas principales
        porcentajeRazonamiento: evaluaci√≥n.porcentajeRazonamiento,
        nivelRazonamiento: evaluaci√≥n.nivelRazonamiento,
        
        // Detalles por categor√≠a
        porCategor√≠a: evaluaci√≥n.porCategor√≠a,
        porDificultad: evaluaci√≥n.porDificultad,
        
        // Capacidades detectadas
        capacidadesDetectadas: evaluaci√≥n.capacidadesDetectadas,
        
        // Comparaciones
        comparaci√≥n: evaluaci√≥n.comparaci√≥n,
        
        // Para compatibilidad
        tasaResoluci√≥n: evaluaci√≥n.general.resueltos / evaluaci√≥n.general.totalPuzzles,
        tiempoPromedio: evaluaci√≥n.general.tiempoPromedio,
        vsRandom: evaluaci√≥n.comparaci√≥n.vsRandom,
        vsSinEvoluci√≥n: 1.0,
        reglaCr√≠ticas: [],
        ejemplosRazonamiento: evaluaci√≥n.capacidadesDetectadas,
        
        // Recomendaciones
        recomendaciones: evaluaci√≥n.recomendaciones,
        
        // Reporte completo en texto
        reporteDetallado: reporteDetallado
      };
      
      console.log('üìä Evaluaci√≥n completa:', evaluaci√≥n);
      return reporte;
      
    } catch (error) {
      console.error('Error generando reporte:', error);
      return {
        conclusi√≥n: "Error al generar reporte",
        arc: { puzzlesResueltos: 0, totalPuzzles: 0, tasa√âxito: 0 },
        error: error.message
      };
    }
  }
  
  promediar(arr) {
    return arr.reduce((a, b) => a + b, 0) / arr.length;
  }
  
  guardarResultados(reporte) {
    const timestamp = new Date().toISOString();
    localStorage.setItem(
      `arc_experiment_${timestamp}`, 
      JSON.stringify(reporte)
    );
  }
  
  /**
   * M√©todos auxiliares para traducir acciones del CA
   */
  determinarTipoAcci√≥n(organismo) {
    // Basado en los efectores del CA
    const ef = organismo.cellularAutomaton.effectors;
    if (Math.abs(ef.movementX) > 0.5 || Math.abs(ef.movementY) > 0.5) {
      return 'modificar';
    }
    return 'observar';
  }
  
  calcularPosici√≥nObjetivo(organismo, entornoARC) {
    const grid = entornoARC.getCurrentGrid();
    const ef = organismo.cellularAutomaton.effectors;
    
    // Convertir movimiento del CA a posici√≥n en el grid
    const gridX = Math.floor((ef.movementX + 1) * grid[0].length / 2);
    const gridY = Math.floor((ef.movementY + 1) * grid.length / 2);
    
    return {
      x: Math.max(0, Math.min(grid[0].length - 1, gridX)),
      y: Math.max(0, Math.min(grid.length - 1, gridY))
    };
  }
  
  determinarValor(organismo) {
    // Para el puzzle de cambiar 1s por 2s
    // Si hay alto gradiente qu√≠mico (muchos 1s), usar valor 2
    const activaci√≥n = organismo.cellularAutomaton.sensors.chemicalGradient;
    
    if (activaci√≥n > 0.3) {
      return 2; // Cambiar a 2 cuando detecta 1s
    }
    
    // Exploraci√≥n aleatoria ocasional
    if (Math.random() < 0.1) {
      return Math.floor(Math.random() * 10);
    }
    
    return 1; // Por defecto mantener
  }
  
  calcularConfianza(organismo) {
    // Basado en la coherencia del CA
    const ca = organismo.cellularAutomaton;
    let activaci√≥nTotal = 0;
    let cellsActivas = 0;
    
    ca.grid.forEach(row => {
      row.forEach(cell => {
        if (cell.type !== 'void' && cell.activation > 0) {
          activaci√≥nTotal += cell.activation;
          cellsActivas++;
        }
      });
    });
    
    return cellsActivas > 0 ? activaci√≥nTotal / cellsActivas : 0;
  }
  
  evolucionarPoblaci√≥n(organismos, entornoARC) {
    // Simplificado: clonar los mejores
    const mejores = organismos
      .sort((a, b) => b.energy - a.energy)
      .slice(0, organismos.length / 2);
    
    const nuevaPoblaci√≥n = [];
    mejores.forEach(org => {
      nuevaPoblaci√≥n.push(org);
      const hijo = org.reproduce();
      if (hijo) nuevaPoblaci√≥n.push(hijo);
    });
    
    return nuevaPoblaci√≥n;
  }
  
  compararConBenchmarkHumano() {
    // Benchmark t√≠pico humano en ARC
    const promedioHumano = 0.85; // 85% de √©xito t√≠pico
    const tasaProteus = this.resultados.filter(r => r.resuelto).length / 
                        this.resultados.length;
    return {
      tasaHumana: promedioHumano,
      tasaProteus: tasaProteus,
      ratio: tasaProteus / promedioHumano
    };
  }
}

/**
 * Entorno espec√≠fico para puzzles ARC
 */
class ARCEnvironment {
  constructor(puzzle) {
    this.puzzle = puzzle;
    this.gridActual = JSON.parse(JSON.stringify(puzzle.input));
    this.acciones = [];
  }
  
  getInputGrid() {
    return this.puzzle.input;
  }
  
  getCurrentGrid() {
    return this.gridActual;
  }
  
  aplicarAcci√≥n(acci√≥n) {
    this.acciones.push(acci√≥n);
    
    // Aplicar transformaci√≥n seg√∫n tipo de acci√≥n
    if (acci√≥n.tipo === 'modificar') {
      const {x, y} = this.gridToCoords(acci√≥n.posici√≥n);
      if (this.validarPosici√≥n(x, y)) {
        // Solo cambiar si la celda original era 1
        if (this.puzzle.input[y][x] === 1) {
          this.gridActual[y][x] = acci√≥n.valor;
          console.log(`üéØ Cambiando celda [${y},${x}] de ${this.puzzle.input[y][x]} a ${acci√≥n.valor}`);
        }
      }
    }
    
    // Verificar si es soluci√≥n correcta
    const correcto = this.verificarSoluci√≥n();
    
    if (correcto) {
      console.log('‚úÖ ¬°Puzzle resuelto correctamente!');
    }
    
    return {
      correcto: correcto,
      completo: this.esCompleto(),
      grid: this.gridActual
    };
  }
  
  verificarSoluci√≥n() {
    return JSON.stringify(this.gridActual) === 
           JSON.stringify(this.puzzle.output);
  }
  
  esCompleto() {
    // Heur√≠stica: consideramos completo si se han hecho suficientes cambios
    return this.acciones.length > this.puzzle.input.flat().length / 2;
  }
  
  gridToCoords(posici√≥n) {
    return {
      x: Math.floor(posici√≥n.x),
      y: Math.floor(posici√≥n.y)
    };
  }
  
  validarPosici√≥n(x, y) {
    return x >= 0 && x < this.gridActual[0].length &&
           y >= 0 && y < this.gridActual.length;
  }
}