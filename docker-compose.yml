# Docker Compose para PROTEUS con acceso desde intranet
# Configurar variables en archivo .env

services:
  # Backend unificado con GPU/Vispy
  proteus-backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: proteus-backend
    ports:
      - "${BACKEND_PORT:-8000}:8000"  # FastAPI
      - "${WEBSOCKET_PORT:-8765}:8765"  # WebSocket ARC
    networks:
      - proteus-net
    environment:
      - PYTHONUNBUFFERED=1
      - DISPLAY=:99
      - CORS_ORIGINS=${CORS_ORIGINS:-["*"]}
    volumes:
      # Para desarrollo - montar c√≥digo fuente
      - ./backend/proteus:/app/proteus:ro
      - ./backend/app:/app/app:ro
      - ./backend/arc:/app/arc:ro
      - ./backend/unified_server.py:/app/unified_server.py:ro
      - ./backend/main.py:/app/main.py:ro
    restart: unless-stopped
    # Para soporte GPU (requiere nvidia-docker)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # Frontend React
  proteus-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: proteus-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    networks:
      - proteus-net
    environment:
      # URLs configurables para acceso desde intranet
      - REACT_APP_BACKEND_URL=${REACT_APP_BACKEND_URL:-http://localhost:8000}
      - REACT_APP_WS_URL=${REACT_APP_WS_URL:-ws://localhost:8000}
      - REACT_APP_ARC_WS_URL=${REACT_APP_ARC_WS_URL:-ws://localhost:8765}
    depends_on:
      - proteus-backend
    restart: unless-stopped
    # No necesitamos extra_hosts para acceso en intranet

  # Servicios originales (legacy)
  proteus:
    build: .
    container_name: proteus_simulator
    volumes:
      - ./output:/app/output
      - ./experiment_results:/app/experiment_results
      - .:/app
    environment:
      - PYTHONUNBUFFERED=1
      - MPLBACKEND=Agg
    command: python visual_demo.py
    
  proteus-interactive:
    build: .
    container_name: proteus_interactive
    volumes:
      - ./output:/app/output
      - ./experiment_results:/app/experiment_results
      - .:/app
    environment:
      - PYTHONUNBUFFERED=1
      - MPLBACKEND=Agg
    stdin_open: true
    tty: true
    command: /bin/bash
    
  proteus-evolution:
    build: .
    container_name: proteus_evolution
    volumes:
      - ./output:/app/output
      - ./experiment_results:/app/experiment_results
      - .:/app
    environment:
      - PYTHONUNBUFFERED=1
      - MPLBACKEND=Agg
    command: python main.py evolve -g 10 -p 50 -d 5 -t 500

networks:
  default:
    name: proteus-network