# Docker Compose para PROTEUS con acceso desde intranet
# Configurar variables en archivo .env
version: '3.8'

services:
  # Backend unificado con GPU/Vispy
  proteus-backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: proteus-backend
    ports:
      - "${BACKEND_PORT:-8000}:8000"  # FastAPI
      - "${WEBSOCKET_PORT:-8765}:8765"  # WebSocket ARC
    networks:
      - proteus-net
    environment:
      - PYTHONUNBUFFERED=1
      - DISPLAY=:99
      - CORS_ORIGINS=${CORS_ORIGINS:-["*"]}
      - SCHEME=${SCHEME:-https}
      - HOST=${HOST:-three.arcprize.org}
      - PORT=${PORT:-443}
      - ARC_API_KEY=${ARC_API_KEY}
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      # Para desarrollo - montar c√≥digo fuente
      - ./backend/proteus:/app/proteus
      - ./backend/app:/app/app
      - ./backend/arc:/app/arc
      - ./backend/unified_server.py:/app/unified_server.py
      - ./backend/main.py:/app/main.py
      - ./.env:/app/.env:ro
    restart: unless-stopped
    # Soporte GPU con Docker Compose v3.8+
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    # Runtime nvidia requiere nvidia-docker instalado
    # runtime: nvidia

  # Frontend React
  proteus-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: proteus-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    networks:
      - proteus-net
    environment:
      # URLs configurables para acceso desde intranet
      - REACT_APP_BACKEND_URL=${REACT_APP_BACKEND_URL:-http://localhost:8000}
      - REACT_APP_WS_URL=${REACT_APP_WS_URL:-ws://localhost:8000}
      - REACT_APP_ARC_WS_URL=${REACT_APP_ARC_WS_URL:-ws://localhost:8765}
    volumes:
      # Para desarrollo - montar build compilado
      - ./frontend/build:/usr/share/nginx/html:ro
    depends_on:
      - proteus-backend
    restart: unless-stopped

  # Servicios originales (legacy)
  proteus:
    build: .
    container_name: proteus_simulator
    volumes:
      - ./output:/app/output
      - ./experiment_results:/app/experiment_results
      - .:/app
    environment:
      - PYTHONUNBUFFERED=1
      - MPLBACKEND=Agg
    command: python visual_demo.py
    
  proteus-interactive:
    build: .
    container_name: proteus_interactive
    volumes:
      - ./output:/app/output
      - ./experiment_results:/app/experiment_results
      - .:/app
    environment:
      - PYTHONUNBUFFERED=1
      - MPLBACKEND=Agg
    stdin_open: true
    tty: true
    command: /bin/bash
    
  proteus-evolution:
    build: .
    container_name: proteus_evolution
    volumes:
      - ./output:/app/output
      - ./experiment_results:/app/experiment_results
      - .:/app
    environment:
      - PYTHONUNBUFFERED=1
      - MPLBACKEND=Agg
    command: python main.py evolve -g 10 -p 50 -d 5 -t 500

networks:
  proteus-net:
    driver: bridge
    name: proteus-network